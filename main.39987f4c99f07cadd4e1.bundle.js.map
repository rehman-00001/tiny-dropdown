{"version":3,"file":"main.39987f4c99f07cadd4e1.bundle.js","sources":["webpack:///./src/Components/TinyDropdown/TinyDropdown.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './TinyDropdown.css';\n\nclass TinyDropdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPanel: false,\n      selectedOption: this.props.selectedIndex\n        ? this.props.options[this.props.selectedIndex]\n        : '',\n      selectedIndex: this.props.selectedIndex,\n      placeHolder: this.props.placeHolder\n    };\n    this.parentDiv = React.createRef();\n    this.button = React.createRef();\n    this.arrow = React.createRef();\n  }\n\n  initializeDefaults = () => {\n    this.parentDiv.current.style.setProperty(\n      '--visible-rows',\n      this.props.visibleOptions\n    );\n    // hack to set color of the button to the dropdown-toggle-arrow\n    this.arrow.current.style.setProperty(\n      'border-bottom-color',\n      this.button.current.style.color\n    );\n    this.arrow.current.style.setProperty(\n      'border-top-color',\n      this.button.current.style.color\n    );\n  };\n\n  componentDidMount = () => {\n    document.addEventListener('mousedown', this.handleOutsideClick);\n    this.initializeDefaults();\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener('mousedown', this.handleOutsideClick);\n  };\n\n  handleOutsideClick = event => {\n    if (!this.parentDiv.current.contains(event.target)) {\n      // Click is outside. So close the dropdown menu\n      this.setState({ showPanel: false });\n    }\n  };\n\n  toggleDropdownMenu = () => {\n    this.setState(prevState => ({ showPanel: !prevState.showPanel }));\n  };\n\n  /**\n   * @description This method is called everytime when an option is\n   * selected.\n   * It updates the state and also calls the callback method: \"onSelect\"\n   * that is passed as props to this component.\n   * @param SelectedIndex - Index of the item in array which is selected by user.\n   */\n  onOptionsSelected = selectedIndex => {\n    const selectedOption = this.props.options[selectedIndex];\n    this.setState({ selectedOption, selectedIndex, showPanel: false });\n    this.props.onSelect(selectedOption, selectedIndex);\n  };\n\n  /**\n   * @description This method is called on every object in \"options\"\n   * array before rendering them. If the options are of string type,\n   * then those items can be rendered directly.\n   *\n   * But for complex object types, to decide which field in the object\n   * is shown in the UI, this method is called and gets the value directly\n   * and displayed in the UI.\n   *\n   * @param Option - One of the object in \"options\" array\n   */\n  getOptionsLabel = option => {\n    if (typeof this.props.label === 'function') {\n      return this.props.label(option);\n    }\n    return option;\n  };\n\n  /**\n   * @description Same as function: \"getOptionsLabel\".\n   * But this method is for the dropdown menu when the panel is in closed state.\n   * If no option is selected, then the placeholder is displayed.\n   */\n  getSelectedOptionLabel = () => {\n    return (\n      this.getOptionsLabel(this.state.selectedOption) || this.state.placeHolder\n    );\n  };\n\n  getDefaultKey = (option, index) => {\n    return `${this.getOptionsLabel(option)}--${index}`;\n  };\n\n  render() {\n    return (\n      <div className=\"tiny-dropdown\" ref={this.parentDiv}>\n        {this.renderDropdownButton()}\n        {this.renderDropdownOptionsPanel()}\n      </div>\n    );\n  }\n\n  renderDropdownButton() {\n    const isPanelActive = this.state.showPanel;\n    const dropdownMenuClasses = [\n      'dropdown-menu',\n      isPanelActive ? 'panel-open' : ''\n    ].join(' ');\n\n    const arrowClass = isPanelActive ? 'arrow-up' : 'arrow-down';\n\n    return (\n      <button\n        role=\"menu\"\n        className={dropdownMenuClasses}\n        style={this.props.cssOverrides.dropdownButton}\n        onClick={this.toggleDropdownMenu}\n        ref={this.button}\n      >\n        <span\n          className=\"dropdown-label dropdown-text\"\n          style={this.props.cssOverrides.dropdownButtonLabel}\n        >\n          {this.getSelectedOptionLabel()}\n        </span>\n        <span className={arrowClass} ref={this.arrow} />\n      </button>\n    );\n  }\n\n  renderDropdownOptionsPanel() {\n    const panelStyles = {\n      ...this.props.cssOverrides.dropdownPanel,\n      display: this.state.showPanel ? 'inline-block' : 'none'\n    };\n\n    const selectedIndex = this.state.selectedIndex;\n    const { dropdownOption, dropdownOptionSelected } = this.props.cssOverrides;\n\n    return (\n      <ul className=\"dropdown-panel\" style={panelStyles}>\n        {this.props.options.map((option, index) => (\n          <li\n            role=\"option\"\n            aria-selected={selectedIndex === index}\n            key={option.key || this.getDefaultKey(option, index)}\n            className=\"dropdown-option dropdown-text\"\n            style={\n              selectedIndex === index ? dropdownOptionSelected : dropdownOption\n            }\n            onClick={() => this.onOptionsSelected(index)}\n          >\n            {this.getOptionsLabel(option)}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nTinyDropdown.propTypes = {\n  /**\n   * @description Placeholder text for the dropdown\n   * By default it shows: \"Select an option\"\n   */\n  placeHolder: PropTypes.string,\n\n  /**\n   * @description An array of options for the dropdown menu.\n   * Items can either be Strings or Objects. In case of objects,\n   * the property \"label\" is mandatory.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * @description A function which is executed on every object in \"options\"\n   * array. Returned value is a string representing that object is\n   * shown in the UI.\n   */\n  label: PropTypes.func,\n\n  /**\n   * @description If any option has to be selected initially, pass the index\n   * of that option as \"selectedIndex\". It will be marked as selected.\n   */\n  selectedIndex: PropTypes.number,\n\n  /**\n   * @description A handler function which will be called when user selects\n   * any option from the dropdown menu.\n   * @params selectedOption, selectedIndex\n   */\n  onSelect: PropTypes.func.isRequired,\n\n  /**\n   * @description Defines the number of options that are visible without\n   * the need of scrolling down.\n   * By default 8 items are visible.\n   */\n  visibleOptions: PropTypes.number,\n\n  /**\n   * @description  Specifies the styles to be overridden. It has sub-properties:\n   *\n   * dropdownButton - Overrides the styles for dropdown itself.\n   * dropdownPanel - Overrides the styles for the dropdown popup panel.\n   * dropdownOption - Overrides the styles for every single option in the popup panel.\n   * dropdownOptionSelected - Overrides the styles for selected option in the popup panel.\n   */\n  cssOverrides: PropTypes.object\n};\n\nTinyDropdown.defaultProps = {\n  placeHolder: 'Select an option',\n  label: null,\n  selectedIndex: null,\n  visibleOptions: 8,\n  cssOverrides: {\n    dropdownButton: null,\n    dropdownPanel: null,\n    dropdownOption: null,\n    dropdownOptionSelected: null\n  }\n};\n\nexport default TinyDropdown;\n"],"mappings":"AAIA","sourceRoot":""}